openapi: 3.1.0
info:
  title: Time Manager Dashboard API
  version: 0.1.0
  description: >
    Backend API for tasks, time tracking, and Pomodoro flows.
    Designed for Electron frontend + mobile/web clients.

servers:
  - url: https://api.timemanager.app/v1
    description: Production
  - url: https://dev.api.timemanager.app/v1
    description: Development
  - url: http://localhost:5173/v1
    description: Local

tags:
  - name: Auth
  - name: Users
  - name: Projects
  - name: Tasks
  - name: Time
  - name: Pomodoro
  - name: Reports

paths:
  /auth/login:
    post:
      tags: [Auth]
      summary: Login with email/password
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/LoginRequest' }
      responses:
        '200':
          description: Logged in
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AuthResponse' }
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

  /auth/refresh:
    post:
      tags: [Auth]
      summary: Refresh access token
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/RefreshRequest' }
      responses:
        '200':
          description: New access token
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AuthResponse' }

  /users/me:
    get:
      security: [{ bearerAuth: [] }]
      tags: [Users]
      summary: Get current user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }

  /projects:
    get:
      security: [{ bearerAuth: [] }]
      tags: [Projects]
      summary: List projects
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PageSize'
        - in: query
          name: q
          schema: { type: string }
          description: Search by name
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PagedProjectList' }
    post:
      security: [{ bearerAuth: [] }]
      tags: [Projects]
      summary: Create project
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ProjectCreate' }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Project' }

  /projects/{projectId}:
    parameters:
      - $ref: '#/components/parameters/ProjectId'
    get:
      security: [{ bearerAuth: [] }]
      tags: [Projects]
      summary: Get project
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Project' }
    patch:
      security: [{ bearerAuth: [] }]
      tags: [Projects]
      summary: Update project
      requestBody:
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ProjectUpdate' }
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Project' }
    delete:
      security: [{ bearerAuth: [] }]
      tags: [Projects]
      summary: Delete project
      responses:
        '204': { description: Deleted }

  /tasks:
    get:
      security: [{ bearerAuth: [] }]
      tags: [Tasks]
      summary: List tasks
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PageSize'
        - in: query
          name: projectId
          schema: { type: string, format: uuid }
        - in: query
          name: status
          schema: { $ref: '#/components/schemas/TaskStatus' }
        - in: query
          name: q
          schema: { type: string }
          description: Search by title
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PagedTaskList' }
    post:
      security: [{ bearerAuth: [] }]
      tags: [Tasks]
      summary: Create task
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/TaskCreate' }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Task' }

  /tasks/{taskId}:
    parameters:
      - $ref: '#/components/parameters/TaskId'
    get:
      security: [{ bearerAuth: [] }]
      tags: [Tasks]
      summary: Get task
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Task' }
    patch:
      security: [{ bearerAuth: [] }]
      tags: [Tasks]
      summary: Update task (partial)
      requestBody:
        content:
          application/json:
            schema: { $ref: '#/components/schemas/TaskUpdate' }
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Task' }
    delete:
      security: [{ bearerAuth: [] }]
      tags: [Tasks]
      summary: Delete task
      responses:
        '204': { description: Deleted }

  /time/entries:
    get:
      security: [{ bearerAuth: [] }]
      tags: [Time]
      summary: List time entries
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PageSize'
        - in: query
          name: from
          schema: { type: string, format: date-time }
        - in: query
          name: to
          schema: { type: string, format: date-time }
        - in: query
          name: projectId
          schema: { type: string, format: uuid }
        - in: query
          name: taskId
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PagedTimeEntryList' }
    post:
      security: [{ bearerAuth: [] }]
      tags: [Time]
      summary: Create a time entry (manual or from Pomodoro)
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/TimeEntryCreate' }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/TimeEntry' }

  /time/entries/{entryId}:
    parameters:
      - $ref: '#/components/parameters/TimeEntryId'
    patch:
      security: [{ bearerAuth: [] }]
      tags: [Time]
      summary: Update a time entry
      requestBody:
        content:
          application/json:
            schema: { $ref: '#/components/schemas/TimeEntryUpdate' }
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/TimeEntry' }
    delete:
      security: [{ bearerAuth: [] }]
      tags: [Time]
      summary: Delete a time entry
      responses:
        '204': { description: Deleted }

  /pomodoro/sessions:
    post:
      security: [{ bearerAuth: [] }]
      tags: [Pomodoro]
      summary: Start a Pomodoro session
      description: Starts a focus session; server records start time.
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/PomodoroStart' }
      responses:
        '201':
          description: Started
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PomodoroSession' }

  /pomodoro/sessions/{sessionId}/stop:
    post:
      security: [{ bearerAuth: [] }]
      tags: [Pomodoro]
      summary: Stop a Pomodoro session
      description: Stops the session; optionally emits a TimeEntry.
      parameters:
        - $ref: '#/components/parameters/PomodoroSessionId'
      requestBody:
        content:
          application/json:
            schema: { $ref: '#/components/schemas/PomodoroStop' }
      responses:
        '200':
          description: Stopped
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PomodoroStopResult' }

  /reports/daily:
    get:
      security: [{ bearerAuth: [] }]
      tags: [Reports]
      summary: Get a per-day summary of time, sessions, and tasks
      parameters:
        - in: query
          name: date
          required: true
          schema: { type: string, format: date }
        - in: query
          name: projectId
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/DailyReport' }

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    Page:
      name: page
      in: query
      schema: { type: integer, minimum: 1, default: 1 }
    PageSize:
      name: pageSize
      in: query
      schema: { type: integer, minimum: 1, maximum: 100, default: 25 }
    ProjectId:
      name: projectId
      in: path
      required: true
      schema: { type: string, format: uuid }
    TaskId:
      name: taskId
      in: path
      required: true
      schema: { type: string, format: uuid }
    TimeEntryId:
      name: entryId
      in: path
      required: true
      schema: { type: string, format: uuid }
    PomodoroSessionId:
      name: sessionId
      in: path
      required: true
      schema: { type: string, format: uuid }

  schemas:
    # ---------- Common ----------
    Error:
      type: object
      properties:
        code: { type: string, example: VALIDATION_ERROR }
        message: { type: string }
        details:
          type: array
          items:
            type: object
            properties:
              path: { type: string, example: body.title }
              message: { type: string, example: "Title is required" }

    PagedMeta:
      type: object
      properties:
        page: { type: integer }
        pageSize: { type: integer }
        total: { type: integer }

    # ---------- Auth ----------
    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email: { type: string, format: email }
        password: { type: string, format: password }
    RefreshRequest:
      type: object
      required: [refreshToken]
      properties:
        refreshToken: { type: string }
    AuthResponse:
      type: object
      properties:
        accessToken: { type: string }
        refreshToken: { type: string }
        user: { $ref: '#/components/schemas/User' }

    # ---------- Users ----------
    User:
      type: object
      properties:
        id: { type: string, format: uuid }
        email: { type: string, format: email }
        name: { type: string }
        avatarUrl: { type: string, format: uri, nullable: true }
        settings:
          type: object
          properties:
            timezone: { type: string, example: Europe/Berlin }
            pomodoro:
              type: object
              properties:
                focusMinutes: { type: integer, default: 25 }
                shortBreakMinutes: { type: integer, default: 5 }
                longBreakMinutes: { type: integer, default: 15 }
                longBreakEvery: { type: integer, default: 4 }

    # ---------- Projects ----------
    Project:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string }
        color: { type: string, example: "#6C5CE7" }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
        archived: { type: boolean, default: false }
    ProjectCreate:
      type: object
      required: [name]
      properties:
        name: { type: string, minLength: 1 }
        color: { type: string, nullable: true }
    ProjectUpdate:
      type: object
      properties:
        name: { type: string }
        color: { type: string, nullable: true }
        archived: { type: boolean }
    PagedProjectList:
      type: object
      properties:
        data:
          type: array
          items: { $ref: '#/components/schemas/Project' }
        meta: { $ref: '#/components/schemas/PagedMeta' }

    # ---------- Tasks ----------
    TaskStatus:
      type: string
      enum: [todo, in_progress, done, archived]
    Task:
      type: object
      properties:
        id: { type: string, format: uuid }
        projectId: { type: string, format: uuid, nullable: true }
        title: { type: string }
        description: { type: string, nullable: true }
        status: { $ref: '#/components/schemas/TaskStatus' }
        effort: { type: integer, nullable: true, description: "Story points or estimate minutes" }
        dueDate: { type: string, format: date, nullable: true }
        tags:
          type: array
          items: { type: string }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    TaskCreate:
      type: object
      required: [title]
      properties:
        projectId: { type: string, format: uuid, nullable: true }
        title: { type: string, minLength: 1 }
        description: { type: string, nullable: true }
        effort: { type: integer, nullable: true }
        dueDate: { type: string, format: date, nullable: true }
        tags:
          type: array
          items: { type: string }
    TaskUpdate:
      type: object
      properties:
        title: { type: string }
        description: { type: string, nullable: true }
        status: { $ref: '#/components/schemas/TaskStatus' }
        effort: { type: integer, nullable: true }
        dueDate: { type: string, format: date, nullable: true }
        tags:
          type: array
          items: { type: string }

    PagedTaskList:
      type: object
      properties:
        data:
          type: array
          items: { $ref: '#/components/schemas/Task' }
        meta: { $ref: '#/components/schemas/PagedMeta' }

    # ---------- Time Entries ----------
    TimeEntry:
      type: object
      properties:
        id: { type: string, format: uuid }
        userId: { type: string, format: uuid }
        projectId: { type: string, format: uuid, nullable: true }
        taskId: { type: string, format: uuid, nullable: true }
        startedAt: { type: string, format: date-time }
        endedAt: { type: string, format: date-time }
        seconds: { type: integer }
        note: { type: string, nullable: true }
        source:
          type: string
          enum: [manual, pomodoro]
    TimeEntryCreate:
      type: object
      required: [startedAt, endedAt]
      properties:
        projectId: { type: string, format: uuid, nullable: true }
        taskId: { type: string, format: uuid, nullable: true }
        startedAt: { type: string, format: date-time }
        endedAt: { type: string, format: date-time }
        note: { type: string, nullable: true }
        source:
          type: string
          enum: [manual, pomodoro]
          default: manual
    TimeEntryUpdate:
      type: object
      properties:
        projectId: { type: string, format: uuid, nullable: true }
        taskId: { type: string, format: uuid, nullable: true }
        startedAt: { type: string, format: date-time }
        endedAt: { type: string, format: date-time }
        note: { type: string, nullable: true }

    PagedTimeEntryList:
      type: object
      properties:
        data:
          type: array
          items: { $ref: '#/components/schemas/TimeEntry' }
        meta: { $ref: '#/components/schemas/PagedMeta' }

    # ---------- Pomodoro ----------
    PomodoroSession:
      type: object
      properties:
        id: { type: string, format: uuid }
        userId: { type: string, format: uuid }
        projectId: { type: string, format: uuid, nullable: true }
        taskId: { type: string, format: uuid, nullable: true }
        startedAt: { type: string, format: date-time }
        endedAt: { type: string, format: date-time, nullable: true }
        state:
          type: string
          enum: [running, stopped]
        focusMinutes: { type: integer }
        breakMinutes: { type: integer, nullable: true }
    PomodoroStart:
      type: object
      properties:
        projectId: { type: string, format: uuid, nullable: true }
        taskId: { type: string, format: uuid, nullable: true }
        focusMinutes: { type: integer, default: 25 }
    PomodoroStop:
      type: object
      properties:
        createTimeEntry:
          type: boolean
          default: true
        note:
          type: string
          nullable: true
    PomodoroStopResult:
      type: object
      properties:
        session: { $ref: '#/components/schemas/PomodoroSession' }
        timeEntry:
          oneOf:
            - { $ref: '#/components/schemas/TimeEntry' }
            - { type: 'null' }

    # ---------- Reports ----------
    DailyReport:
      type: object
      properties:
        date: { type: string, format: date }
        totals:
          type: object
          properties:
            seconds: { type: integer }
            byProject:
              type: array
              items:
                type: object
                properties:
                  projectId: { type: string, format: uuid, nullable: true }
                  seconds: { type: integer }
            byTask:
              type: array
              items:
                type: object
                properties:
                  taskId: { type: string, format: uuid, nullable: true }
                  seconds: { type: integer }
        pomodoro:
          type: object
          properties:
            sessions: { type: integer }
            totalFocusMinutes: { type: integer }

security:
  - bearerAuth: []
